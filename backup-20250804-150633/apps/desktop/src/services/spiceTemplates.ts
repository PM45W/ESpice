import type { Parameter } from '../types/index';

// SPICE Model Template Types
export interface SPICETemplate {
  id: string;
  name: string;
  version: string;
  description: string;
  deviceType: 'GaN-HEMT' | 'SiC-MOSFET' | 'Si-MOSFET' | 'Other';
  parameters: SPICEParameter[];
  headerTemplate: string;
  modelTemplate: string;
  subcircuitTemplate?: string;
  validationRules: ValidationRule[];
}

export interface SPICEParameter {
  name: string;
  spiceName: string;
  unit: string;
  defaultValue?: string | number;
  range?: {
    min: number;
    max: number;
  };
  required: boolean;
  description: string;
  mappingPriority: number; // Higher priority = preferred mapping
  aliases: string[]; // Common parameter names from datasheets
}

export interface ValidationRule {
  type: 'range' | 'relationship' | 'syntax' | 'physical';
  parameter?: string;
  condition: string;
  message: string;
}

export interface ParameterMapping {
  datasheetParam: Parameter;
  spiceParam: SPICEParameter;
  confidence: number;
  transformValue?: (value: any) => any;
}

// ASM-HEMT Template (v101.5.0)
export const ASM_HEMT_TEMPLATE: SPICETemplate = {
  id: 'asm-hemt-101.5.0',
  name: 'ASM-HEMT',
  version: '101.5.0',
  description: 'Advanced SPICE Model for GaN High Electron Mobility Transistors',
  deviceType: 'GaN-HEMT',
  parameters: [
    {
      name: 'Threshold Voltage',
      spiceName: 'VTO',
      unit: 'V',
      defaultValue: -2.72,
      range: { min: -10, max: 2 },
      required: true,
      description: 'Threshold voltage',
      mappingPriority: 100,
      aliases: ['VTH', 'Vth', 'V_TH', 'Threshold_Voltage', 'Gate_Threshold']
    },
    {
      name: 'Drain-Source On-Resistance',
      spiceName: 'RDS',
      unit: 'Ohms',
      defaultValue: 0.1,
      range: { min: 0.001, max: 100 },
      required: true,
      description: 'Drain-source on-resistance',
      mappingPriority: 95,
      aliases: ['RDS_ON', 'RDSon', 'R_DS_ON', 'On_Resistance', 'RDS(ON)']
    },
    {
      name: 'Drain Saturation Current',
      spiceName: 'IDSS',
      unit: 'A',
      defaultValue: 1.0,
      range: { min: 0.001, max: 100 },
      required: true,
      description: 'Drain saturation current',
      mappingPriority: 90,
      aliases: ['IDSS', 'I_DSS', 'ID_SAT', 'Saturation_Current', 'ID(SAT)']
    },
    {
      name: 'Breakdown Voltage',
      spiceName: 'BVDSS',
      unit: 'V',
      defaultValue: 650,
      range: { min: 10, max: 10000 },
      required: true,
      description: 'Drain-source breakdown voltage',
      mappingPriority: 85,
      aliases: ['BVDSS', 'BV_DSS', 'V_BREAKDOWN', 'Breakdown_Voltage', 'VBR']
    },
    {
      name: 'Gate-Source Capacitance',
      spiceName: 'CGS',
      unit: 'F',
      defaultValue: 1e-12,
      range: { min: 1e-15, max: 1e-9 },
      required: false,
      description: 'Gate-source capacitance',
      mappingPriority: 70,
      aliases: ['CGS', 'C_GS', 'Cgs', 'Gate_Source_Capacitance']
    },
    {
      name: 'Gate-Drain Capacitance',
      spiceName: 'CGD',
      unit: 'F',
      defaultValue: 1e-12,
      range: { min: 1e-15, max: 1e-9 },
      required: false,
      description: 'Gate-drain capacitance',
      mappingPriority: 70,
      aliases: ['CGD', 'C_GD', 'Cgd', 'Gate_Drain_Capacitance']
    },
    {
      name: 'Sub-threshold Slope',
      spiceName: 'SS',
      unit: 'V/dec',
      defaultValue: 0.12,
      range: { min: 0.06, max: 1.0 },
      required: false,
      description: 'Sub-threshold slope',
      mappingPriority: 65,
      aliases: ['SS', 'S', 'Subthreshold_Slope', 'Sub_Threshold']
    },
    {
      name: 'Transconductance',
      spiceName: 'GM',
      unit: 'S',
      defaultValue: 1.0,
      range: { min: 0.001, max: 100 },
      required: false,
      description: 'Transconductance',
      mappingPriority: 60,
      aliases: ['GM', 'gm', 'Transconductance', 'G_M']
    }
  ],
  headerTemplate: `
* ASM-HEMT Model v101.5.0
* Generated by ESpice Parameter Extraction Tool
* Date: {DATE}
* Device: {DEVICE_NAME}
* Manufacturer: {MANUFACTURER}
`,
  modelTemplate: `
.MODEL {MODEL_NAME} NMOS (
+ LEVEL = 101
+ VERSION = 101.5.0
+ VTO = {VTO}
+ RDS = {RDS}
+ IDSS = {IDSS}
+ BVDSS = {BVDSS}
+ CGS = {CGS}
+ CGD = {CGD}
+ SS = {SS}
+ GM = {GM}
+ TNOM = 27
+ )
`,
  subcircuitTemplate: `
.SUBCKT {SUBCKT_NAME} D G S B
X1 D G S B {MODEL_NAME}
.ENDS
`,
  validationRules: [
    {
      type: 'range',
      parameter: 'VTO',
      condition: 'VTO >= -10 && VTO <= 2',
      message: 'Threshold voltage must be between -10V and 2V'
    },
    {
      type: 'range',
      parameter: 'RDS',
      condition: 'RDS > 0',
      message: 'Drain-source resistance must be positive'
    },
    {
      type: 'physical',
      condition: 'IDSS > 0 && BVDSS > 0',
      message: 'Current and voltage values must be positive'
    }
  ]
};

// MVSG Template (v4.0.0)
export const MVSG_TEMPLATE: SPICETemplate = {
  id: 'mvsg-4.0.0',
  name: 'MVSG',
  version: '4.0.0',
  description: 'Multi-Voltage SPICE model for SiC MOSFETs',
  deviceType: 'SiC-MOSFET',
  parameters: [
    {
      name: 'Threshold Voltage',
      spiceName: 'vto',
      unit: 'V',
      defaultValue: -2.72,
      range: { min: -10, max: 10 },
      required: true,
      description: 'Threshold voltage',
      mappingPriority: 100,
      aliases: ['VTH', 'Vth', 'V_TH', 'Threshold_Voltage', 'Gate_Threshold']
    },
    {
      name: 'Gate Capacitance',
      spiceName: 'cg',
      unit: 'F/m^2',
      defaultValue: 4.0e-3,
      range: { min: 1e-6, max: 1e-1 },
      required: true,
      description: 'Gate capacitance per unit area',
      mappingPriority: 90,
      aliases: ['CG', 'C_G', 'Gate_Capacitance', 'Cg']
    },
    {
      name: 'Source Injection Velocity',
      spiceName: 'vx0',
      unit: 'm/s',
      defaultValue: 3.0e5,
      range: { min: 1e4, max: 1e7 },
      required: true,
      description: 'Source injection velocity',
      mappingPriority: 80,
      aliases: ['VX0', 'v_x0', 'Injection_Velocity', 'Velocity']
    },
    {
      name: 'Low-Field Mobility',
      spiceName: 'mu0',
      unit: 'm^2/Vs',
      defaultValue: 0.135,
      range: { min: 0.001, max: 10 },
      required: true,
      description: 'Low-field mobility',
      mappingPriority: 85,
      aliases: ['MU0', 'mu_0', 'Mobility', 'Low_Field_Mobility']
    },
    {
      name: 'Sheet Resistance',
      spiceName: 'rsh',
      unit: 'Ohms/Sq',
      defaultValue: 150.0,
      range: { min: 1, max: 10000 },
      required: false,
      description: '2-DEG Sheet Resistance',
      mappingPriority: 75,
      aliases: ['RSH', 'R_SH', 'Sheet_Resistance', 'Rsh']
    },
    {
      name: 'Sub-threshold Slope',
      spiceName: 'ss',
      unit: 'V/dec',
      defaultValue: 0.120,
      range: { min: 0.06, max: 1.0 },
      required: false,
      description: 'Sub-threshold slope',
      mappingPriority: 65,
      aliases: ['SS', 'S', 'Subthreshold_Slope', 'Sub_Threshold']
    }
  ],
  headerTemplate: `
* MVSG Model v4.0.0
* Generated by ESpice Parameter Extraction Tool
* Date: {DATE}
* Device: {DEVICE_NAME}
* Manufacturer: {MANUFACTURER}
`,
  modelTemplate: `
.MODEL {MODEL_NAME} NMOS (
+ LEVEL = 200
+ VERSION = 4.0.0
+ type = 1
+ vto = {vto}
+ cg = {cg}
+ vx0 = {vx0}
+ mu0 = {mu0}
+ rsh = {rsh}
+ ss = {ss}
+ tnom = 27
+ )
`,
  subcircuitTemplate: `
.SUBCKT {SUBCKT_NAME} D G S B
X1 D G S B {MODEL_NAME}
.ENDS
`,
  validationRules: [
    {
      type: 'range',
      parameter: 'vto',
      condition: 'vto >= -10 && vto <= 10',
      message: 'Threshold voltage must be between -10V and 10V'
    },
    {
      type: 'range',
      parameter: 'cg',
      condition: 'cg > 0',
      message: 'Gate capacitance must be positive'
    },
    {
      type: 'physical',
      condition: 'vx0 > 0 && mu0 > 0',
      message: 'Velocity and mobility must be positive'
    }
  ]
};

// Standard SPICE Template (BSIM4)
export const STANDARD_SPICE_TEMPLATE: SPICETemplate = {
  id: 'bsim4-standard',
  name: 'Standard SPICE',
  version: 'BSIM4',
  description: 'Traditional SPICE models for Si-based devices',
  deviceType: 'Si-MOSFET',
  parameters: [
    {
      name: 'Threshold Voltage',
      spiceName: 'VTH0',
      unit: 'V',
      defaultValue: 0.7,
      range: { min: -5, max: 5 },
      required: true,
      description: 'Threshold voltage',
      mappingPriority: 100,
      aliases: ['VTH', 'Vth', 'V_TH', 'Threshold_Voltage', 'Gate_Threshold']
    },
    {
      name: 'Mobility',
      spiceName: 'U0',
      unit: 'cm^2/Vs',
      defaultValue: 670,
      range: { min: 10, max: 2000 },
      required: true,
      description: 'Zero-bias mobility',
      mappingPriority: 90,
      aliases: ['U0', 'MU0', 'Mobility', 'Zero_Bias_Mobility']
    },
    {
      name: 'Channel Length Modulation',
      spiceName: 'LAMBDA',
      unit: '1/V',
      defaultValue: 0.1,
      range: { min: 0, max: 1 },
      required: false,
      description: 'Channel length modulation parameter',
      mappingPriority: 70,
      aliases: ['LAMBDA', 'Lambda', 'CLM', 'Channel_Length_Modulation']
    },
    {
      name: 'Saturation Velocity',
      spiceName: 'VSAT',
      unit: 'cm/s',
      defaultValue: 8.0e6,
      range: { min: 1e6, max: 5e7 },
      required: false,
      description: 'Saturation velocity',
      mappingPriority: 80,
      aliases: ['VSAT', 'V_SAT', 'Saturation_Velocity', 'Velocity_Saturation']
    }
  ],
  headerTemplate: `
* Standard SPICE Model (BSIM4)
* Generated by ESpice Parameter Extraction Tool
* Date: {DATE}
* Device: {DEVICE_NAME}
* Manufacturer: {MANUFACTURER}
`,
  modelTemplate: `
.MODEL {MODEL_NAME} NMOS (
+ LEVEL = 14
+ VERSION = 4.7.0
+ VTH0 = {VTH0}
+ U0 = {U0}
+ LAMBDA = {LAMBDA}
+ VSAT = {VSAT}
+ TNOM = 27
+ )
`,
  subcircuitTemplate: `
.SUBCKT {SUBCKT_NAME} D G S B
M1 D G S B {MODEL_NAME}
.ENDS
`,
  validationRules: [
    {
      type: 'range',
      parameter: 'VTH0',
      condition: 'VTH0 >= -5 && VTH0 <= 5',
      message: 'Threshold voltage must be between -5V and 5V'
    },
    {
      type: 'range',
      parameter: 'U0',
      condition: 'U0 > 0',
      message: 'Mobility must be positive'
    }
  ]
};

// Template registry
export const SPICE_TEMPLATES: Record<string, SPICETemplate> = {
  'asm-hemt-101.5.0': ASM_HEMT_TEMPLATE,
  'mvsg-4.0.0': MVSG_TEMPLATE,
  'bsim4-standard': STANDARD_SPICE_TEMPLATE
};

// Parameter mapping service
export class ParameterMappingService {
  private templates: Record<string, SPICETemplate> = SPICE_TEMPLATES;

  /**
   * Map datasheet parameters to SPICE parameters for a given template
   */
  public mapParameters(
    datasheetParams: Parameter[],
    templateId: string
  ): ParameterMapping[] {
    const template = this.templates[templateId];
    if (!template) {
      throw new Error(`Template not found: ${templateId}`);
    }

    const mappings: ParameterMapping[] = [];

    // For each SPICE parameter, find the best matching datasheet parameter
    for (const spiceParam of template.parameters) {
      const bestMatch = this.findBestParameterMatch(datasheetParams, spiceParam);
      if (bestMatch) {
        const transformValue = this.getValueTransform(bestMatch.parameter, spiceParam);
        mappings.push({
          datasheetParam: bestMatch.parameter,
          spiceParam,
          confidence: bestMatch.confidence,
          ...(transformValue && { transformValue })
        });
      }
    }

    return mappings;
  }

  /**
   * Find the best matching datasheet parameter for a SPICE parameter
   */
  private findBestParameterMatch(
    datasheetParams: Parameter[],
    spiceParam: SPICEParameter
  ): { parameter: Parameter; confidence: number } | null {
    let bestMatch: { parameter: Parameter; confidence: number } | null = null;

    for (const datasheetParam of datasheetParams) {
      const confidence = this.calculateMatchConfidence(datasheetParam, spiceParam);
      if (confidence > 0.5 && (!bestMatch || confidence > bestMatch.confidence)) {
        bestMatch = { parameter: datasheetParam, confidence };
      }
    }

    return bestMatch;
  }

  /**
   * Calculate confidence score for parameter matching
   */
  private calculateMatchConfidence(
    datasheetParam: Parameter,
    spiceParam: SPICEParameter
  ): number {
    let confidence = 0;
    const paramName = datasheetParam.name.toLowerCase();
    const paramUnit = datasheetParam.unit.toLowerCase();

    // Check for exact name matches
    if (spiceParam.aliases.some(alias => paramName.includes(alias.toLowerCase()))) {
      confidence += 0.6;
    }

    // Check for partial name matches
    if (spiceParam.aliases.some(alias => {
      const aliasWords = alias.toLowerCase().split(/[_\s-]/);
      return aliasWords.some(word => paramName.includes(word));
    })) {
      confidence += 0.3;
    }

    // Unit matching (bonus)
    if (this.unitsMatch(paramUnit, spiceParam.unit.toLowerCase())) {
      confidence += 0.2;
    }

    // Category matching (bonus)
    if (datasheetParam.category === 'electrical') {
      confidence += 0.1;
    }

    return Math.min(confidence, 1.0);
  }

  /**
   * Check if units match (with common variations)
   */
  private unitsMatch(unit1: string, unit2: string): boolean {
    const normalizeUnit = (unit: string) => {
      return unit.toLowerCase()
        .replace(/ohm/g, 'Ω')
        .replace(/omega/g, 'Ω')
        .replace(/volt/g, 'v')
        .replace(/ampere/g, 'a')
        .replace(/amp/g, 'a')
        .replace(/farad/g, 'f')
        .replace(/siemens/g, 's')
        .replace(/\s+/g, '')
        .replace(/[()]/g, '');
    };

    return normalizeUnit(unit1) === normalizeUnit(unit2);
  }

  /**
   * Get value transformation function for unit conversion
   */
  private getValueTransform(
    datasheetParam: Parameter,
    spiceParam: SPICEParameter
  ): ((value: any) => any) | undefined {
    // Add unit conversion logic here
    const dsUnit = datasheetParam.unit.toLowerCase();
    const spiceUnit = spiceParam.unit.toLowerCase();

    // Common conversions
    if (dsUnit.includes('mω') && spiceUnit.includes('ω')) {
      return (value) => Number(value) / 1000;
    }
    if (dsUnit.includes('pf') && spiceUnit.includes('f')) {
      return (value) => Number(value) * 1e-12;
    }
    if (dsUnit.includes('nf') && spiceUnit.includes('f')) {
      return (value) => Number(value) * 1e-9;
    }
    if (dsUnit.includes('ma') && spiceUnit.includes('a')) {
      return (value) => Number(value) / 1000;
    }

    return undefined;
  }

  /**
   * Get available templates for a device type
   */
  public getTemplatesForDeviceType(deviceType: string): SPICETemplate[] {
    return Object.values(this.templates).filter(
      template => template.deviceType === deviceType || template.deviceType === 'Other'
    );
  }

  /**
   * Get template by ID
   */
  public getTemplate(templateId: string): SPICETemplate | undefined {
    return this.templates[templateId];
  }
}

// Export singleton instance
export const parameterMappingService = new ParameterMappingService(); 
version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: ./website
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API
  backend:
    build:
      context: ./website/server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    depends_on:
      - postgres
      - redis
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=espice_website
      - POSTGRES_USER=${POSTGRES_USER:-espice}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-espice_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./website/server/prisma/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-espice} -d espice_website"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - espice-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - espice-network
    restart: unless-stopped

  # Log aggregation - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - espice-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - espice-network
    restart: unless-stopped

  # File upload service
  upload-service:
    build:
      context: ./website/server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - SERVICE_TYPE=upload
    volumes:
      - ./downloads:/app/downloads
    networks:
      - espice-network
    restart: unless-stopped

  # Background job processor
  job-processor:
    build:
      context: ./website/server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - SERVICE_TYPE=jobs
    depends_on:
      - redis
      - postgres
    networks:
      - espice-network
    restart: unless-stopped

  # Consolidated Data Processing Service
  data-processing-service:
    build:
      context: ./services/core/data-processing-service
      dockerfile: Dockerfile
    ports:
      - "8011:8011"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./temp:/app/temp
      - ./examples:/app/examples
      - ./data:/app/data
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Consolidated Media Processing Service
  media-processing-service:
    build:
      context: ./services/core/media-processing-service
      dockerfile: Dockerfile
    ports:
      - "8012:8012"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./temp:/app/temp
      - ./data:/app/data
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Consolidated System Service
  system-service:
    build:
      context: ./services/core/system-service
      dockerfile: Dockerfile
    ports:
      - "8015:8015"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PDF Service
  pdf-service:
    build:
      context: ./services/core/pdf-service
      dockerfile: Dockerfile
    ports:
      - "8013:8013"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./temp:/app/temp
      - ./data:/app/data
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SPICE Generation Service
  spice-generation-service:
    build:
      context: ./services/core/spice-generation
      dockerfile: Dockerfile
    ports:
      - "8014:8014"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./temp:/app/temp
      - ./data:/app/data
    networks:
      - espice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  espice-network:
    driver: bridge 